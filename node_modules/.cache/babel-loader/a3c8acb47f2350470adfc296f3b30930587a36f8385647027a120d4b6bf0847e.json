{"ast":null,"code":"// Import all named exports attached to a usersAPI object\n// This syntax can be helpful documenting where the methods come from\nimport * as usersAPI from \"./users-api\";\nexport async function signUp(userData) {\n  // Delegate the network request code to the users-api.js API module\n  // which will ultimately return a JSON Web Token (JWT)\n  const token = await usersAPI.signUp(userData);\n  // Baby step by returning whatever is sent back by the server\n  // Persist the \"token\"\n  localStorage.setItem(\"token\", token);\n  return getUser();\n}\nexport async function login(userData) {\n  // Delegate the network request code to the users-api.js API module\n  // which will ultimately return a JSON Web Token (JWT)\n  const token = await usersAPI.login(userData);\n  // Baby step by returning whatever is sent back by the server\n  // Persist the \"token\"\n  localStorage.setItem(\"token\", token);\n  return getUser();\n}\nexport function getToken() {\n  // getItem returns null if there's no string\n  const token = localStorage.getItem(\"token\");\n  if (!token) return null;\n  // Obtain the payload of the token\n  const payload = JSON.parse(atob(token.split(\".\")[1]));\n  // A JWT's exp is expressed in seconds, not milliseconds, so convert\n  if (payload.exp < Date.now() / 1000) {\n    // Token has expired - remove it from localStorage\n    localStorage.removeItem(\"token\");\n    return null;\n  }\n  return token;\n}\nexport function getUser() {\n  const token = getToken();\n  // If there's a token, return the user in the payload, otherwise return null\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\n}\nexport function logOut() {\n  localStorage.removeItem(\"token\");\n}\nexport function checkToken() {\n  // Just so that you don't forget how to use .then\n  return usersAPI.checkToken()\n  // checkToken returns a string, but let's\n  // make it a Date object for more flexibility\n  .then(dateStr => new Date(dateStr));\n}","map":{"version":3,"names":["usersAPI","signUp","userData","token","localStorage","setItem","getUser","login","getToken","getItem","payload","JSON","parse","atob","split","exp","Date","now","removeItem","user","logOut","checkToken","then","dateStr"],"sources":["/Users/khai/sei/projects/nsm/museum/src/utilities/users-service.js"],"sourcesContent":["// Import all named exports attached to a usersAPI object\n// This syntax can be helpful documenting where the methods come from\nimport * as usersAPI from \"./users-api\";\n\nexport async function signUp(userData) {\n  // Delegate the network request code to the users-api.js API module\n  // which will ultimately return a JSON Web Token (JWT)\n  const token = await usersAPI.signUp(userData);\n  // Baby step by returning whatever is sent back by the server\n  // Persist the \"token\"\n  localStorage.setItem(\"token\", token);\n  return getUser();\n}\n\nexport async function login(userData) {\n  // Delegate the network request code to the users-api.js API module\n  // which will ultimately return a JSON Web Token (JWT)\n  const token = await usersAPI.login(userData);\n  // Baby step by returning whatever is sent back by the server\n  // Persist the \"token\"\n  localStorage.setItem(\"token\", token);\n  return getUser();\n}\n\nexport function getToken() {\n  // getItem returns null if there's no string\n  const token = localStorage.getItem(\"token\");\n  if (!token) return null;\n  // Obtain the payload of the token\n  const payload = JSON.parse(atob(token.split(\".\")[1]));\n  // A JWT's exp is expressed in seconds, not milliseconds, so convert\n  if (payload.exp < Date.now() / 1000) {\n    // Token has expired - remove it from localStorage\n    localStorage.removeItem(\"token\");\n    return null;\n  }\n  return token;\n}\n\nexport function getUser() {\n  const token = getToken();\n  // If there's a token, return the user in the payload, otherwise return null\n  return token ? JSON.parse(atob(token.split(\".\")[1])).user : null;\n}\n\nexport function logOut() {\n  localStorage.removeItem(\"token\");\n}\n\nexport function checkToken() {\n  // Just so that you don't forget how to use .then\n  return (\n    usersAPI\n      .checkToken()\n      // checkToken returns a string, but let's\n      // make it a Date object for more flexibility\n      .then((dateStr) => new Date(dateStr))\n  );\n}\n"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,QAAQ,MAAM,aAAa;AAEvC,OAAO,eAAeC,MAAMA,CAACC,QAAQ,EAAE;EACrC;EACA;EACA,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACC,MAAM,CAACC,QAAQ,CAAC;EAC7C;EACA;EACAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACpC,OAAOG,OAAO,CAAC,CAAC;AAClB;AAEA,OAAO,eAAeC,KAAKA,CAACL,QAAQ,EAAE;EACpC;EACA;EACA,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACO,KAAK,CAACL,QAAQ,CAAC;EAC5C;EACA;EACAE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACpC,OAAOG,OAAO,CAAC,CAAC;AAClB;AAEA,OAAO,SAASE,QAAQA,CAAA,EAAG;EACzB;EACA,MAAML,KAAK,GAAGC,YAAY,CAACK,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACN,KAAK,EAAE,OAAO,IAAI;EACvB;EACA,MAAMO,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACV,KAAK,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD;EACA,IAAIJ,OAAO,CAACK,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;IACnC;IACAb,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO,IAAI;EACb;EACA,OAAOf,KAAK;AACd;AAEA,OAAO,SAASG,OAAOA,CAAA,EAAG;EACxB,MAAMH,KAAK,GAAGK,QAAQ,CAAC,CAAC;EACxB;EACA,OAAOL,KAAK,GAAGQ,IAAI,CAACC,KAAK,CAACC,IAAI,CAACV,KAAK,CAACW,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,IAAI,GAAG,IAAI;AAClE;AAEA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvBhB,YAAY,CAACc,UAAU,CAAC,OAAO,CAAC;AAClC;AAEA,OAAO,SAASG,UAAUA,CAAA,EAAG;EAC3B;EACA,OACErB,QAAQ,CACLqB,UAAU,CAAC;EACZ;EACA;EAAA,CACCC,IAAI,CAAEC,OAAO,IAAK,IAAIP,IAAI,CAACO,OAAO,CAAC,CAAC;AAE3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}